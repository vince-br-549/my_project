Thu Mar  7 04:56:46 PM EST 2024

###############################
restore vs revert vs reset

    There are three commands with similar names: git reset, git restore and git revert.

        git-revert is about making a new commit that reverts the changes made by other commits.
        git-restore is about restoring files in the working tree from either the index or another commit.
        This command does not update your branch.
        The command can also be used to restore files in the index from another commit.
        git-reset is about updating your branch, moving the tip in order to add or remove commits from the branch. This operation changes the commit history.
        git reset can also be used to restore the index, overlapping with git restore.
Examples  restore:
	if a file is staged ( you did an add but not a commit )
	git restore <file> puts it back to the last commit.

	git restore --staged <file> # unstages it.

	git restore --source=HEAD --staged --worktree <file>  #
	if the file was staged this returns the file to original commit condition ( eg not staged
	and not modified ).
Examples reset:
###############################
Using git revert:
all changes in the commit you revert to will be "reverted"

# This example will create three separate revert commits, use non merge commits only:
git revert a867b4af 25eee4ca 0766c053

# It also takes ranges. This will revert the last two commits:
git revert HEAD~2..HEAD

# Similarly, you can revert a range of commits using commit hashes (non inclusive of first hash):
git revert 0d1d7fc..a867b4a

# Reverting a merge commit. You can also use a range of merge commits here.
git revert -m 1 <merge_commit_sha>

# To get just one, you could use `rebase -i` to squash them afterwards
# Or, you could do it manually (be sure to do this at top level of the repo)
# get your index and work tree into the desired state, without changing HEAD:
git checkout 0d1d7fc32 .

# Then commit. Be sure and write a good message describing what you just did
git commit
###############################
to fix a detached HEAD
git switch <branchname>
###############################
Use git checkout to undelete a file.
